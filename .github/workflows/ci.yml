name: CI

on:
  pull_request:
  push:
    branches:
      - master

env:
  RUST_BACKTRACE: full

jobs:
  rustfmt:
    name: rustfmt / linux / stable
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: default
          override: true
          components: rustfmt

      - name: cargo fmt -- --check
        run: |
          cargo fmt --all -- --check

  clippy:
    name: clippy / linux / stable
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: Install dependencies
        run: |
          DEBIAN_FRONTEND=noninteractive sudo apt-get update
          DEBIAN_FRONTEND=noninteractive sudo apt-get install -y ninja-build nasm meson

      - name: Install rust
        run: |
          rustup update --no-self-update stable
          rustup component add clippy

      - name: cargo clippy --all --examples
        run: cargo clippy --all --examples

  test:
    name: test / ${{ matrix.name }}
    runs-on: ${{ matrix.os || 'ubuntu-20.04' }}

    strategy:
      fail-fast: false
      matrix:
        include:
          - name: linux / stable
            rust: stable
            target: x86_64-unknown-linux-gnu
          - name: linux / stable / codec-aom
            features: '--no-default-features --features codec-aom'
            target: x86_64-unknown-linux-gnu
          - name: linux / beta
            rust: beta
            target: x86_64-unknown-linux-gnu
          - name: linux / nightly
            rust: nightly
            target: x86_64-unknown-linux-gnu
          - name: linux / 1.56.0
            rust: 1.56.0
            target: x86_64-unknown-linux-gnu
          - name: macOS / stable
            os: macOS-latest
            target: x86_64-apple-darwin
          - name: macOS / stable / codec-aom
            os: macOS-latest
            features: '--no-default-features --features codec-aom'
            target: x86_64-apple-darwin
          - name: windows / stable
            os: windows-2019
            target: x86_64-pc-windows-msvc
          - name: windows / stable codec-aom
            os: windows-2019
            features: '--no-default-features --features codec-aom'
            target: x86_64-pc-windows-msvc
          - name: windows x86 / stable codec-aom
            os: windows-2019
            features: '--no-default-features --features codec-aom'
            target: i686-pc-windows-msvc

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: Install dependencies (linux)
        if: (matrix.os || 'ubuntu-20.04') == 'ubuntu-20.04'
        run: |
          DEBIAN_FRONTEND=noninteractive sudo apt-get update
          DEBIAN_FRONTEND=noninteractive sudo apt-get install -y ninja-build nasm meson

      - name: Install dependencies (macOS)
        if: matrix.os == 'macOS-latest'
        run: |
          brew install ninja nasm meson

      - name: Install dependencies (windows)
        if: matrix.os == 'windows-2019'
        run: |
          choco install -y ninja
          pip install meson

      - name: Install nasm (windows)
        if: matrix.os == 'windows-2019'
        uses: ilammy/setup-nasm@v1

      - name: Install rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust || 'stable' }}
          profile: default
          default: true
          override: true
          target: ${{ matrix.target }}

      - name: Test (Windows x64)
        if: matrix.os == 'windows-2019'
        shell: cmd
        run: |
          call "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build/vcvars64.bat"
          cargo test ${{ matrix.features }} --target ${{ matrix.target }}

      - name: Test (Linux, macOS)
        if: matrix.os != 'windows-2019'
        run: |
          cargo test ${{ matrix.features }} --target ${{ matrix.target }}
